<?php

/*
                               (
                              (/(
                              (//(
                              (///(
                             (/////(
                             (//////(                          )
                            (////////(                        (/)
                            (////////(                       (///)
                           (//////////(                      (////)
                           (//////////(                     (//////)
                          (////////////(                    (///////)
                         (/////////////(                   (/////////)
                        (//////////////(                  (///////////)
                        (///////////////(                (/////////////)
                       (////////////////(               (//////////////)
                      (((((((((((((((((((              (((((((((((((((
                     (((((((((((((((((((              ((((((((((((((
                     (((((((((((((((((((            ((((((((((((((
                    ((((((((((((((((((((           (((((((((((((
                    ((((((((((((((((((((          ((((((((((((
                    (((((((((((((((((((         ((((((((((((
                    (((((((((((((((((((        ((((((((((
                    ((((((((((((((((((/      (((((((((
                    ((((((((((((((((((     ((((((((
                    (((((((((((((((((    (((((((
                   ((((((((((((((((((  (((((
                   #################  ##
                   ################  #
                  ################# ##
                 %################  ###
                 ###############(   ####
                ###############      ####
               ###############       ######
              %#############(        (#######
             %#############           #########
            ############(              ##########
           ###########                  #############
          #########                      ##############
        %######

        Powered by Knish.IO: Connecting a Decentralized World

Please visit https://github.com/WishKnish/KnishIO-Client-PHP for information.

License: https://github.com/WishKnish/KnishIO-Client-PHP/blob/master/LICENSE
 */

namespace WishKnish\KnishIO\Client\Query;

use WishKnish\KnishIO\Client\HttpClient\HttpClientInterface;
use WishKnish\KnishIO\Client\Response\Response;
use WishKnish\KnishIO\Client\Response\ResponseBalance;

/**
 * Class QueryUserActivity
 * @package WishKnish\KnishIO\Client\Query
 */
class QueryUserActivity extends Query {

  // Query
  protected static string $default_query = 'query(
    $bundleHash:String,
    $metaType: String,
    $metaId: String,
    $ipAddress: String,
    $browser: String,
    $osCpu: String,
    $resolution: String,
    $timeZone: String,
    $countBy: [CountByUserActivity],
    $interval: span
  ) {
      UserActivity(
        bundleHash: $bundleHash,
        metaType: $metaType,
        metaId: $metaId,
        ipAddress: $ipAddress,
        browser: $browser,
        osCpu: $osCpu,
        resolution: $resolution,
        timeZone: $timeZone,
        countBy: $countBy,
        interval: $interval
      )
    @fields
  }';

  // Fields
  protected array $fields = [
    'createdAt',
    'bundleHash',
    'metaType',
    'metaId',
    'instances' => [
      'bundleHash',
      'metaType',
      'metaId',
      'jsonData',
      'createdAt',
      'updatedAt'
    ],
    'instanceCount' => [], // Autogenerated fields => see construct
  ];
  protected array $instanceCountFields = [
    'id',
    'count',
  ];
  const INSTANCE_CASCADE_COUNT = 8;


  /**
   * Query constructor.
   *
   * @param HttpClientInterface $client
   * @param string|null $query
   */
  public function __construct ( HttpClientInterface $client, string $query = null ) {
    parent::__construct( $client, $query );

    $this->client = $client;
    $this->query = $query ?? static::$default_query;

    // Generate instance cascade fields
    $this->fields[ 'instanceCount' ] = $this->instanceCountFields;
    $this->fields[ 'instanceCount' ][ 'instances' ] = $this->getInstanceCascade();
  }

  /**
   * @param int $cascade
   * @param int $cascadeCount
   *
   * @return array|string[]
   */
  protected function getInstanceCascade( int $cascade = 1, int $cascadeCount = self::INSTANCE_CASCADE_COUNT ): array {
    $fields = $this->instanceCountFields;
    if ( $cascade < $cascadeCount ) {
      $fields[ 'instances' ] = $this->getInstanceCascade( $cascade + 1, $cascadeCount );
    }
    return $fields;
  }

  /**
   * @param $response
   *
   * @return Response
   */
  public function createResponse ( string $response ): Response {
    return new Response( $this, $response, 'data.UserActivity' );
  }

}
